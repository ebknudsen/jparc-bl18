/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: FITS_monitor
*
* %I
* Written by: Erik B Knudsen, derived from PSD_TOF_monitor by P. Willendrup
* Date: May 20th 2014
* Version: $Revision$
* Origin: Rose-liner bus
* Release: McStas 2.1
*
* Position and TOF-sensitive monitor outputting a single FITS-file (as at J-PARC).
*
* %D
* A  (nx times ny times nt) pixel monitor. 
*
* Will output a single FITS-file (as at BL-18 at J-PARC) as well as two regular McStas-files:
* 1. a time integrated psd, and 2. a spatially integrated TOF-monitor. This behaviour may be suppressed
* by setting the noextrafiles flag.
*
* Example: HDB_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
            nx=90, ny=90, tmin=4000, tmax=7000, nt=3, filename="Output")
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* tmin:     Lower time bound (mu-s)
* tmax:     Upper time bound (mu-s)
* xwidth:   Width/diameter of detector (x). Overrides xmin,xmax. (m)
* yheight:  Height of detector (y). Overrides ymin,ymax. (m)
* nx:       Number of pixel columns (1)
* ny:       Number of pixel rows (1)
* nt:       Number of TOF bins (1)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
* noextrafiles: If set do ot generate PSD and TOF versions of files (1)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of neutron counts
* PSD_p:    Array of neutron weight counts
* PSD_p2:   Array of second moments
*
* %E
*******************************************************************************/


DEFINE COMPONENT FITS_monitor
DEFINITION PARAMETERS (count_sampling=0,short_floats=0,nx=64, ny=64, nt=1902, string filename, restore_neutron=0, noextrafiles=0)
SETTING PARAMETERS (xmin=0, xmax=0, ymin=0, ymax=0, xwidth=0, yheight=0, tmin=0, tmax=0, count_time=1)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2, PSD_Ns, PSD_ps, PSD_p2s, TOF_Ns, TOF_ps, TOF_p2s, TOT_N)
//STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
//POLARISATION PARAMETERS (sx,sy,sz)

SHARE
%{
#include <stdint.h>
    uint32_t byteswap32(void *src, void *dest){
        /*for a 32 bit entity make little endian into big endian*/
        uint32_t *source,*target;
        source = src;
        if(dest){ 
            target = dest;
        }
        *target = ( (0xFF & *source) << 24) | ( (0xFF00 & *source) << 8) | ( (0xFF0000 & *source) >> 8 ) | ( (0xFF000000 & *source) >> 24) ;
        return *target; 
    }

    uint64_t byteswap64(void *src, void *dest){
        /*for a 64 bit entity make little endian into big endian*/
        uint64_t *source,*target;
        source = src;
        if(dest){ 
            target = dest;
        }
        *target = ( (0xFF & *source) << 24) | ( (0xFF00 & *source) << 8) | ( (0xFF0000 & *source) >> 8 ) | ( (0xFF000000 & *source) >> 24) ;
        return *target; 
    }
%}

DECLARE
  %{
    long long TOT_N;
    float *PSD_N[nt];
    float *PSD_p[nt];
    float *PSD_p2[nt];
#if !noextrafiles
    double PSD_Ns[nx][ny];
    double PSD_ps[nx][ny];
    double PSD_p2s[nx][ny];
    double TOF_Ns[nt];
    double TOF_ps[nt];
    double TOF_p2s[nt];
#endif

  %}
INITIALIZE
  %{

  int i,j,k;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("HDB_monitor: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    if (tmin >= tmax) {
      printf("HDB_monitor: %s: Unmeaningful TOF definition!\n",
	     NAME_CURRENT_COMP);
      exit(0);
    }

#if !noextrafiles
    for (i=0; i<nx; i++){
        for (j=0; j<ny; j++) {
            PSD_Ns[i][j] = 0;
            PSD_ps[i][j] = 0;
            PSD_p2s[i][j] = 0;
        }
    }
    for (i=0;i<nt;i++){
        TOF_Ns[i]=0;
        TOF_ps[i]=0;
        TOF_p2s[i]=0;
    }
#endif
  %}

TRACE
  %{
    int i,j,k;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax && (1E6*t)>tmin && (1E6*t)<tmax)
    {
      i = floor((x - xmin)*nx/(xmax - xmin));
      j = floor((y - ymin)*ny/(ymax - ymin));
      k = floor((1E6*t - tmin)*nt/(tmax - tmin));
      if (k>nt-1){
        k=nt-1;
      }else if (k<0){
        k=0;
      }
      if(PSD_N[k]==NULL){
        /*first data point in this pixel => allocate*/
        PSD_N[k]=calloc(nx*ny,sizeof(*(PSD_N[0])));
        PSD_p[k]=calloc(nx*ny,sizeof(*(PSD_p[0])));
        PSD_p2[k]=calloc(nx*ny,sizeof(*(PSD_p2[0])));
        if( PSD_p[k] ==NULL || PSD_p2[k]==NULL || PSD_N[k]==NULL){
            fprintf(stderr,"Error (%s): Memory allocation error in trace.\n",NAME_CURRENT_COMP);
            exit(-1);
        }
      } 
      TOT_N++;
      PSD_N[k][i*ny+j]++;
      PSD_p[k][i*ny+j] += (float) p;
      PSD_p2[k][i*ny+j] += (float) p*p;
#if !noextrafiles
      PSD_Ns[i][j]++;
      PSD_ps[i][j]+=p;
      PSD_p2s[i][j]+=p*p;

      TOF_Ns[k]++;
      TOF_ps[k]+=p;
      TOF_p2s[k]+=p*p;
#endif
      SCATTER;
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
%{
  int ii,jj,kk;
  long long bytes_written=0;
  char ff[256];
  const unsigned int fits_item_len=80;
  const unsigned int fits_header_len=2880;
  char Hitem[fits_item_len+1];
  char HDU[fits_header_len+1];
  const char fits_item_string_fmt[]="%-8s%-2s%20s%-80s";
  const char fits_item_int_fmt[]="%-8s%-2s%20d%-80s";
  const char fits_item_llong_fmt[]="%-8s%-2s%20ld%-80s";
  
  FILE *fp;
  double buffer_dbl[nx*ny];
  float buffer_flt[nx*ny];
  int16_t buffer_i16[nx*ny];
  void *buffer;
  //double *zero_time_slice_buffer[nx*ny];
  size_t buffer_itemsize;
  int flag_overflow=0;

  /* open file*/
  /* write header to file*/
  if(mcdirname!=NULL && strlen(mcdirname)>0)  
    snprintf(ff,255,"%s%s%s.fits",mcdirname,MC_PATHSEP_S,filename);  
  else
    snprintf(ff,255,"%s.fits",filename);

  /*how should the data be formatted in the FITS file*/
  if (count_sampling){
    //buffer = buffer_i16;
    buffer_itemsize=sizeof(buffer_i16[0]);
    printf("buffer itemsize is: %d\n",buffer_itemsize);
  }else if (short_floats){
    buffer = buffer_flt;
    buffer_itemsize=-sizeof(buffer_flt[0]);//the negative sign indicates floating pts.
    printf("buffer itemsize is: %d\n",buffer_itemsize);
  }else{
    buffer = buffer_dbl;
    buffer_itemsize=-sizeof(buffer_dbl[0]);//the negative sign indicates floating pts.
    printf("buffer itemsize is: %d\n",buffer_itemsize);
  }
  
  /*generate FITS header unit*/   
  HDU[0]='\0';
  snprintf(Hitem,81,"%-8s%-2s%20s%-80s","SIMPLE","= ","T","");strncat(HDU,Hitem,80);
  snprintf(Hitem,81,"%-8s%-2s%20d%-80s","BITPIX","= ",8*buffer_itemsize,"");strncat(HDU,Hitem,80);
  snprintf(Hitem,81,"%-8s%-2s%20d%-80s","NAXIS","= ",3,"");strncat(HDU,Hitem,80);
  snprintf(Hitem,81,"%-8s%-2s%20d%-80s","NAXIS1","= ",ny,"");strncat(HDU,Hitem,80);
  snprintf(Hitem,81,"%-8s%-2s%20d%-80s","NAXIS2","= ",nx,"");strncat(HDU,Hitem,80);
  snprintf(Hitem,81,"%-8s%-2s%20d%-80s","NAXIS3","= ",nt,"");strncat(HDU,Hitem,80);
  /*These header items are not MANDATORY and thus not necessarily fixed format*/ 
  snprintf(Hitem,81,"%-8s%-2s%s%s%-80s","INSTRUME","= ","'McStas:",mcinstrument_name,"'");strncat(HDU,Hitem,80);
  snprintf(Hitem,81,"%-8s%-2s%20ld%-80s","N_COUNTS","= ",TOT_N,"");strncat(HDU,Hitem,80);
  //snprintf(Hitem,81,"%-8s%-2s%20g%-80s","TIMEBIN","= ",(tmax-tmin)/nt,"");strncat(HDU,Hitem,80);
  snprintf(Hitem,81,"%-80s","END");strncat(HDU,Hitem,80);
  /*pad the header to 2880*/
  snprintf(HDU+strlen(HDU),2880-strlen(HDU)+1,"%-*s",2880-strlen(HDU),"");

#ifdef USE_MPI
  if(mpi_node_rank==0){
      if( (fp=fopen(ff,"wb"))==NULL){
          fprintf(stderr,"Error (%s): Could not open file \'%s\' for writing. Errno=%d\n",NAME_CURRENT_COMP,ff,errno);
          exit(errno);
      }
      if ( (kk=fwrite(HDU,1,2880,fp))!=2880) {
          fprintf(stderr,"Error (%s): Data not written to file \'%s\' cleanly. (%d!=2880)\n",NAME_CURRENT_COMP,ff,kk);
          exit(errno);
      }
  }
  /*initialize the zero buffer to zero*/
  //memset(zero_time_slice_buffer,0,nx*ny*sizeof(*zero_time_slice_buffer));
#else
  if( (fp=fopen(ff,"wb"))==NULL){
    fprintf(stderr,"Error (%s): Could not open file \'%s\' for writing. Errno=%d\n",NAME_CURRENT_COMP,ff,errno);
    exit(errno);
  }
  if ( (kk=fwrite(HDU,1,2880,fp))!=2880) {
    fprintf(stderr,"Error (%s): Data not written to file \'%s\' cleanly. (%d!=2880)\n",NAME_CURRENT_COMP,ff,kk);
    exit(errno);
  }
#endif


  /*data is written in time slices*/

  int ll;
  for (ll=0;ll<nt;ll++) {
      /*at time slice ll*/
#ifdef USE_MPI
      if(mpi_node_rank==0){
          /*Check if this timeslice has been allocated at the mother node*/
          if (PSD_p[ll]==NULL){
              PSD_N[ll]=calloc(nx*ny,sizeof(*(PSD_N[0])));
              PSD_p[ll]=calloc(nx*ny,sizeof(*(PSD_p[0])));
              PSD_p2[ll]=calloc(nx*ny,sizeof(*(PSD_p2[0])));
              if( PSD_p[ll] ==NULL || PSD_p2[ll]==NULL || PSD_N[ll]==NULL){
                  fprintf(stderr,"Error (%s): Memory allocation error for gather operation.\n",NAME_CURRENT_COMP);
                  exit(-1);
              }
          }
          double time_slice_buffer[nx*ny];
          
          /*receive from all the other ranks*/
          /*do a gather operation*/
          int source_node=0;
          for (source_node=1;source_node<mpi_node_count;source_node++){
              unsigned long nn=0;
              mc_MPI_Recv(&nn, 1, MPI_UNSIGNED_LONG, source_node);/*receive into buffer*/
              if (nn){
                  /*there's data to recieve*/;
                  int status=mc_MPI_Recv(time_slice_buffer,nx*ny,MPI_DOUBLE,source_node);
                  if (status != MPI_SUCCESS){
                      printf("MPI not sucess\n");
                      exit(-1);
                  }
                  /*add to assembled time_slice (i.e. do an MPI reduce)*/
                  for (kk=0;kk<nx*ny;kk++){
                      PSD_p[ll][kk]+=time_slice_buffer[kk];
                  }
              }
/*              else{*/
/*                  printf("no data from node %d ts %d\n",source_node,ll);*/
/*              }*/
          }
          /*Now the gathered data for time slice ll is in the array PSD_p
            Write it to a second buffer as either 64 bit doubles or 16 bit integers and push to disk*/
      
          /*set buffer to zero*/
          memset(buffer,0,abs(buffer_itemsize)*nx*ny);
          if(PSD_p[ll]!=NULL){
              if (count_sampling){
                  for (kk=0;kk<nx*ny;kk++){
                      /*if there is something in this timeslice to write then convert to FITS format
                       * otherwise skip and just write zeros*/
                      /*convert to "real" counts*/
                      double se=mcestimate_error(PSD_N[ll][kk],PSD_p[ll][kk],PSD_p2[ll][kk]);
                      double estimate=randnorm()*se+(PSD_p[ll][kk]/PSD_N[ll][kk]);
                      int16_t pixel; 
                      pixel =(int16_t)floor(estimate>32767?32767:estimate);
                      if (estimate>0) {
                          //swap bytes
                          *( (int16_t*) buffer + kk )=  (pixel <<8 )| (pixel >>8);
                      }
                      if (estimate > 32767 && !flag_overflow) {
                          flag_overflow=1;
                      }
                  }
              }else if (abs(buffer_itemsize)==4){
                  /*convert to 32 bit floats*/
                  float fm;
                  for (kk=0;kk<nx*ny;kk++){
                      if(PSD_p[ll][kk]<FLT_MAX){
                          fm=(float) PSD_p[ll][kk];
                      }else{
                          fm=FLT_MAX;
                          flag_overflow=1;
                      }
                      byteswap32(&fm,( (float *) buffer + kk)); 
                      //*( (float*) buffer + kk) = byteswap32(&fm,NULL);
                  }
              }else{
                  /*we just write the actual double here (should that be byteswapped as well?)*/
                  for (kk=0;kk<nx*ny;kk++){
                      *( (double*) buffer +kk) = (double) PSD_p[ll][kk];

                  }
              }
          }
          /*now write the buffer to disk*/
          if( (kk=fwrite(buffer,abs(buffer_itemsize),nx*ny,fp))!=nx*ny){
              fprintf(stderr,"Error (%s): Data not written to file \'%s\' cleanly. Errno=%d, items written: %d\n",NAME_CURRENT_COMP,ff,errno,kk);
              exit(errno);
          }
          bytes_written+=kk*abs(buffer_itemsize);
      } else {
          /*do this for non-mothers*/
          unsigned long nn;
          if (PSD_p[ll]==NULL){
              nn=0;
              mc_MPI_Send(&nn,1, MPI_UNSIGNED_LONG, 0);
              //printf("node %d sending zeros for slice %d\n",mpi_node_rank,ll);
              //mc_MPI_Send(zero_time_slice_buffer,nx*ny,MPI_DOUBLE,0);
          }else{
              nn=nx*ny;
              double buffering[nx*ny];
              int kk;
              for (kk=0;kk<nx*ny;kk++){
                  buffering[kk]=PSD_p[ll][kk];
              } 
              mc_MPI_Send(&nn,1, MPI_UNSIGNED_LONG, 0);
              int status=mc_MPI_Send(buffering,nx*ny,MPI_DOUBLE,0);
              if (status != MPI_SUCCESS){
                  printf("MPI not sucess in node %d\n",mpi_node_rank);
                  exit(-1);
              }
          }
      }
#else
      /*set buffer to zero*/
      memset(buffer,0,abs(buffer_itemsize)*nx*ny);
      if(PSD_p[ll]!=NULL){
          if (count_sampling){
              for (kk=0;kk<nx*ny;kk++){
                  /*if there is something in this timeslice to write then convert to FITS format
                   * otherwise skip and just write zeros*/
                  /*convert to "real" counts*/
                  double se=mcestimate_error(PSD_N[ll][kk],PSD_p[ll][kk],PSD_p2[ll][kk]);
                  double estimate=randnorm()*se+(PSD_p[ll][kk]/PSD_N[ll][kk]);
                  int16_t pixel; 
                  pixel =(int16_t)floor(estimate>32767?32767:estimate);
                  if (estimate>0) {
                      //swap bytes
                      *( (int16_t*) buffer + kk )=  (pixel <<8 )| (pixel >>8);
                  }
                  if (estimate > 32767 && !flag_overflow) {
                      flag_overflow=1;
                  }
              }
          }else if (abs(buffer_itemsize)==4){
              /*convert to 32 bit floats*/
              float fm;
              for (kk=0;kk<nx*ny;kk++){
                  if(PSD_p[ll][kk]<FLT_MAX){
                      fm=(float) PSD_p[ll][kk];
                  }else{
                      fm=FLT_MAX;
                      flag_overflow=1;
                  }
                  byteswap32(&fm,( (float *) buffer + kk)); 
                  //*( (float*) buffer + kk) = byteswap32(&fm,NULL);
              }
          }else{
                  /*we just write the actual double here (should that be byteswapped as well?)*/
              for (kk=0;kk<nx*ny;kk++){
                  *( (double*) buffer +kk) = PSD_p[ll][kk];

              }
          }
      }

      /*now write the buffer to disk*/
      if( (kk=fwrite(buffer,abs(buffer_itemsize),nx*ny,fp))!=nx*ny){
          fprintf(stderr,"Error (%s): Data not written to file \'%s\' cleanly. Errno=%d, items written: %d\n",NAME_CURRENT_COMP,ff,errno,kk);
          exit(errno);
      }
      bytes_written+=kk*abs(buffer_itemsize);
#endif
      /*free memory if necessary*/
      if (PSD_p[ll]!=NULL){
          free(PSD_p[ll]);
          free(PSD_p2[ll]);
          free(PSD_N[ll]);
      }
  }
 
#ifdef USE_MPI
  MPI_MASTER(
#endif
  while (bytes_written%2880!=0){
    /*pad with 0s to end on a 2880 boundary*/
    fwrite("\0",1,1,fp);bytes_written++;
  }
  fclose(fp);
  if(flag_overflow){
    fprintf(stderr,"Warning: (%s): Pixel overflow occured. Please examine .fits file carefully.\n",NAME_CURRENT_COMP);
  }
#ifdef USE_MPI
  );
#endif

#if !noextrafiles
  snprintf(ff,255,"%s.psd",filename);  
  /*we also write the time integrated PSD signal to a regular McStas file*/
  DETECTOR_OUT_2D(
      "FITS monitor (integrated over time)",
        "X position [m]",
        "Y position [m]",
        xmin, xmax, ymin, ymax,
        nx, ny,
        &PSD_Ns[0][0],&PSD_ps[0][0],&PSD_p2s[0][0],
        ff);
  
  snprintf(ff,255,"%s.tof",filename);  
  /*we also write a spatially integrated TOF-signal to a regular McStas monitor*/
  DETECTOR_OUT_1D(
      "FITS monitor (integrated over space)",
      "TOF [mu s]","Intensity","t",
        tmin/1e6, tmax/1e6, nt,
        TOF_Ns,TOF_ps,TOF_p2s,
        ff);
#endif 
%}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
