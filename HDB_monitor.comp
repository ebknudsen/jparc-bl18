/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: HDB_monitor
*
* %I
* Written by: Erik B Knudsen, derived from PSD_TOF_monitor by P. Willendrup
* Date: May 20th 2014
* Version: $Revision$
* Origin: Rose-liner bus
* Release: McStas 2.1
*
* Position and TOF-sensitive monitor outputting a single hdb-file (as at J-PARC).
*
* %D
* A  (nx times nybins times nt) pixel PSD_TOF monitor. 
*
* Will output a single HDB-file (as at BL-18 at J-PARC).
*
* Example: HDB_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
            nx=90, nybins=90, tmin=4000, tmax=7000, nt=3, filename="Output")
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* tmin:     Lower time bound (mu-s)
* tmax:     Upper time bound (mu-s)
* xwidth:   Width/diameter of detector (x). Overrides xmin,xmax. (m)
* yheight:  Height of detector (y). Overrides ymin,ymax. (m)
* nx:       Number of pixel columns (1)
* nybins:       Number of pixel rows (1)
* nt:       Number of TOF bins (1)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of neutron counts
* PSD_p:    Array of neutron weight counts
* PSD_p2:   Array of second moments
*
* %E
*******************************************************************************/


DEFINE COMPONENT HDB_monitor
DEFINITION PARAMETERS (noextrafiles=1,nx=64, ny=64, nt=2000, string filename, restore_neutron=0)
SETTING PARAMETERS (xmin=0, xmax=0, ymin=0, ymax=0, xwidth=.256, yheight=.256, tmin=0, tmax=40000, count_time=1)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2, PSD_Ns, PSD_ps, PSD_p2s, TOF_Ns, TOF_ps, TOF_p2s)
//STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
//POLARISATION PARAMETERS (sx,sy,sz)

DECLARE
  %{
    float *PSD_N[ny][nx];
    float *PSD_p[ny][nx];
    float *PSD_p2[ny][nx];
#if !noextrafiles
    double PSD_Ns[nx][ny];
    double PSD_ps[nx][ny];
    double PSD_p2s[nx][ny];
    double TOF_Ns[nt];
    double TOF_ps[nt];
    double TOF_p2s[nt];
#endif
  %}
INITIALIZE
  %{

  int i,j,k;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("HDB_monitor: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    if (tmin >= tmax) {
      printf("HDB_monitor: %s: Unmeaningful TOF definition!\n",
	     NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nx; i++)
      for (j=0; j<ny; j++) {
        /*the default data ordering in McStas is to have y changing fastest.
         *This is not so in the J-PARC hdb format. Here t is fastest then x, and
         * y slowest.*/
#if !noextrafiles
        PSD_Ns[i][j] = 0;
	PSD_ps[i][j] = 0;
	PSD_p2s[i][j] = 0;
#endif
	for (k=0; k<nt; k++) {
	  PSD_N[j][i] = NULL;
	  PSD_p[j][i] = NULL;
	  PSD_p2[j][i] = NULL;
	}
      }
    %}
TRACE
  %{
    int i,j,k;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax && (1E6*t)>tmin && (1E6*t)<tmax)
    {
      i = floor((x - xmin)*nx/(xmax - xmin));
      j = floor((y - ymin)*ny/(ymax - ymin));
      k = floor((1E6*t - tmin)*nt/(tmax - tmin));
      if (k>=nt){
        k=nt-1;
      }else if (k<0){
        k=0;
      }
      //kl= k>>8;
      //km= k & ~0xFFFF;
      if (PSD_N[j][i]==NULL){
        /*if (PSD[j][i][kl][km]==NULL)
         * Could do a kind of hash-table -here instead. Allocate for say nt>>8 (nt/128) buckets
         * in which you could put rays as they arrive.
         * bucketnr=k>>8;
         * binnr= k & ~0xFFFF;
         * This would then become more fine grained and dynamic in terms of nt*/
        /*nothing has been assigned to this spatial pixel before so we need to allocate memory*/
        PSD_N[j][i]=calloc(nt,sizeof(*(PSD_N[0][0])));
        PSD_p[j][i]=calloc(nt,sizeof(*(PSD_p[0][0])));
        PSD_p2[j][i]=calloc(nt,sizeof(*(PSD_p2[0][0])));
      }
      PSD_N[j][i][k]++;
      PSD_p[j][i][k] += (float) p;
      PSD_p2[j][i][k] += (float) p*p;

#if !noextrafiles
      PSD_Ns[i][j]++;
      PSD_ps[i][j]+=p;
      PSD_p2s[i][j]+=p*p;

      TOF_Ns[k]++;
      TOF_ps[k]+=p;
      TOF_p2s[k]+=p*p;
#endif
      SCATTER;
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}


SAVE
%{
  int ii,jj,kk;
  char ff[256];
  char tt[256];
  FILE *fp;
  float buffer[nt];
  float recv_buffer[nt];
  
  /* open file*/
  /* write header to file*/
  if(mcdirname!=NULL && strlen(mcdirname)>0)  
    snprintf(ff,255,"%s%s%s.hdb",mcdirname,MC_PATHSEP_S,filename);  
  else
    snprintf(ff,255,"%s.hdb",filename);
#ifdef USE_MPI
  if(mpi_node_rank==0){
    if( (fp=fopen(ff,"wb"))==NULL){
      fprintf(stderr,"Error (%s): Could not open file \'%s\' for writing. Errno=%d\n",NAME_CURRENT_COMP,ff,errno);
      exit(errno);
    }
  }
#else
  if( (fp=fopen(ff,"wb"))==NULL){
    fprintf(stderr,"Error (%s): Could not open file \'%s\' for writing. Errno=%d\n",NAME_CURRENT_COMP,ff,errno);
    exit(errno);
  }
#endif
  /* spatial loops*/
  /* for each pixel
   * if NULL allocate
   * then MPI-sum that temporal row and write it to disk
   * end loop*/
  for (ii=0;ii<ny;ii++){
    for (jj=0;jj<nx;jj++){
#ifdef USE_MPI
        double send_buffer[nt];
        double recv_buffer[nt];
        for (kk=0;kk<nt;kk++){
            if(PSD_N[ii][jj]!=NULL){
                //PSD_N[ii][jj]=calloc(nt,sizeof(*(PSD_N[0][0])));
                //PSD_p[ii][jj]=calloc(nt,sizeof(*(PSD_p[0][0])));
                //PSD_p2[ii][jj]=calloc(nt,sizeof(*(PSD_p2[0][0])));
                send_buffer[kk]=(double) PSD_p[ii][jj][kk];
            }else{
                send_buffer[kk]=0;
            }
        }
        MPI_Reduce(send_buffer,recv_buffer,nt,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
        if (mpi_node_rank==0){
            if( (kk=fwrite(recv_buffer,64/8,nt,fp))!=nt){
                fprintf(stderr,"Error (%s): Data not written to file \'%s\' cleanly. Errno=%d, bytes written: %d\n",NAME_CURRENT_COMP,ff,errno,kk);
                exit(errno);
            }
        }
#else
        double write_buffer[nt];
        if(PSD_p[ii][jj]==NULL){
            memset(write_buffer,0,sizeof(*write_buffer)*nt);
        }else{
            for (kk=0;kk<nt;kk++){
                write_buffer[kk]=(double) PSD_p[ii][jj][kk];
            }
        }
        if( (kk=fwrite(write_buffer,sizeof(*write_buffer),nt,fp))!=nt){
            fprintf(stderr,"Error (%s): Data not written to file \'%s\' cleanly. Errno=%d, bytes written: %d\n",NAME_CURRENT_COMP,ff,errno,kk);
            exit(errno);
        }
#endif
        /*free the memory*/
        if(PSD_p[ii][jj]!=NULL){
            free(PSD_N[ii][jj]);
            free(PSD_p[ii][jj]);
            free(PSD_p2[ii][jj]);
        }
    }
  }
  
/*close file*/
#ifdef USE_MPI
  if(mpi_node_rank==0){
    fclose(fp);
  }
#else
  fclose(fp);
#endif

  /* Make two regular McStas monitors (integrated over time and XY, respectively as well.
   * It is nice to have something quick on screen*/
#if !noextrafiles
  snprintf(ff,255,"%s.psd",filename);  
  /*we also write the time integrated PSD signal to a regular McStas file*/
  DETECTOR_OUT_2D(
      "HDB monitor (integrated over time)",
        "X position [m]",
        "Y position [m]",
        xmin, xmax, ymin, ymax,
        nx, ny,
        &PSD_Ns[0][0],&PSD_ps[0][0],&PSD_p2s[0][0],
        ff);
  
  snprintf(ff,255,"%s.tof",filename);  
  DETECTOR_OUT_1D(
      "HDB monitor (integrated over space)",
      "TOF [s]","Intensity","t",
        tmin/1e6, tmax/1e6, nt,
        TOF_Ns,TOF_ps,TOF_p2s,
        ff);
#endif  
%}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
